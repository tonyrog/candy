%%% @author Tony Rogvall <tony@rogvall.se>
%%% @copyright (C) 2023, Tony Rogvall
%%% @doc
%%%    Save CAN frames to a log file
%%% @end
%%% Created :  8 Nov 2023 by Tony Rogvall <tony@rogvall.se>

-module(candy_record).

-export([file/1]).
-compile(export_all).

-include_lib("can/include/can.hrl").

dump() -> dump(60000).
dump(TimeoutMs) ->
    Fd = standard_io,
    can_router:attach(),
    TRef = erlang:start_timer(TimeoutMs, self(), done),
    StartTime = erlang:system_time(),
    save_header(Fd, StartTime, "standard_io"),
    save(Fd, 1, StartTime, TRef).
    

file(Filename) ->
    file(Filename, 60000).

file(Filename, TimeoutMs) ->
    case file:open(Filename++".trc", [write]) of
	{ok, Fd} ->
	    can_router:attach(),
	    TRef = erlang:start_timer(TimeoutMs, self(), done),
	    StartTime = erlang:system_time(),
	    save_header(Fd, StartTime, Filename),
	    try save(Fd, 1, StartTime, TRef) of
		Result -> Result
	    after
		file:close(Fd)
	    end;
	Error ->
	    Error
    end.

save_header(Fd, StartTime, Filename) ->
    StartTimeSeconds = erlang:convert_time_unit(StartTime, native, seconds),
    StartTimeMicro = erlang:convert_time_unit(StartTime, native, micro_seconds),
    file:write(Fd, 
[
 ";$FILEVERSION=2.1\n",
 ";$STARTTIME=",
 integer_to_list(StartTimeMicro div 1000000), ".",
 integer_to_list(StartTimeMicro rem 1000000), "\n", 
 ";$COLUMNS=N,O,T,B,I,d,R,L,D\n",
 ";\n",
 "; ", Filename, ".trc", "\n",
 "; Start time: ", calendar:system_time_to_rfc3339(StartTimeSeconds), "\n",
 "; Generated by candy_record\n",
 ";-------------------------------------------------------------------------------\n",
 "; Message    Time   Type      ID   Rx/Tx\n"
 "; Number    Offset    | Bus [hex]    | Reserved\n"
 ";   |        [ms]     |  |    |      |     Data Length Code\n"
 ";   |         |       |  |    |      |  |  |    Data [hex] ...\n"
 ";   |         |       |  |    |      |  |  |    |\n"
 ";---+-- ------+------ +- +- --+----- +- +- +--- +- -- -- -- -- -- -- --\n"
]).

save(Fd, I, Time, TRef) ->
    receive
	{timeout, TRef, done} ->
	    ok;
	Frame = #can_frame{} ->
	    save_frame(Fd, I, Time, Frame),
	    save(Fd, I+1, Time, TRef);
	_Other ->
	    io:format("got ~p\n", [_Other]),
	    save(Fd, I, Time, TRef)
    end.

%% N,O,T,B,I,d,R,L,D
save_frame(Fd, I, Time, #can_frame{id=ID,intf=B,len=L,ts=O,data=D}) ->
    %%              N   O  T    B   ID  d   R  L   D
    io:format(Fd, "~7w ~13s ~2s ~2w ~8s Rx  - ~2w ~s\n",
	      [I,
	       format_ts(Time, O),
	       format_type(ID),
	       B,  %% 0 = - ?
	       format_id(ID),
	       L,
	       format_data(D)
	       ]).

format_data(D) ->
    lists:join(" ", [[format_hex(H),format_hex(L)] || <<H:4,L:4>> <= D]).

format_hex(H) ->
    element(H+1, {$0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$A,$B,$C,$D,$E,$F}).


format_id(ID) ->
    if ID band ?CAN_EFF_FLAG =/= 0 ->
	    tl(integer_to_list(16#100000000+(ID band ?CAN_EFF_MASK),16));
       true ->
	    tl(integer_to_list(16#10000+(ID band ?CAN_SFF_MASK),16))
    end.

format_ts(Time, Offset) ->
    if Offset =:= ?CAN_NO_TIMESTAMP ->
	    Offs = erlang:system_time() - Time,
	    UOffs = erlang:convert_time_unit(Offs, native, micro_seconds),
	    Ms = UOffs div 1000,
	    Us = UOffs rem 1000,
	    [integer_to_list(Ms),".",tl(integer_to_list(1000+Us))];
       is_integer(Offset) ->
	    [integer_to_list(Offset),".000"];
       is_float(Offset) ->
	    Offs = trunc(Offset*1000),
	    Ms = Offs div 1000,
	    Us = Offs rem 1000,
	    [integer_to_list(Ms),".",tl(integer_to_list(1000+Us))]
    end.

format_type(ID) ->
    if ID band ?CAN_FD_FLAG  =/= 0 -> "FD";
       ID band ?CAN_RTR_FLAG =/= 0 -> "RR";
       ID band ?CAN_ERR_FLAG =/= 0 -> "ER";
       true -> "DT"
    end.
    
